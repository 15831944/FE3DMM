// 从类型库向导中用“添加类”创建的计算机生成的 IDispatch 包装类
#pragma once

#import "PcommServer.exe" no_namespace

// CPmacDevice 包装类

class CPmacDevice : public COleDispatchDriver
{
public:
	CPmacDevice::CPmacDevice(){} // 调用 COleDispatchDriver 默认构造函数
	CPmacDevice::CPmacDevice(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CPmacDevice::CPmacDevice(const CPmacDevice& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

	// 特性
public:

	// 操作
public:


	// IPmacDevice 方法
public:
	void Open(long dwDevice, BOOL * pbSuccess);
	void Close(long dwDevice);
	void DataStart(long dwDevice, long resolution, long period);
	void DataStop(long dwDevice);
	void DataCollect(long dwDevice, VARIANT * pvArray, BOOL * pbSuccess);
	void DPRBackGroundVar(long dwDevice, BOOL bOn);
	void DPRAddressRange(long dwDevice, BOOL bUpper, BOOL bPC, long * pVal);
	void GetPmacType(long dwDevice, long * pVal);
	void DPRVarBufRemove(long dwDevice, long index, BOOL * pbSuccess);
	void DPRVarBufRead(long dwDevice, long h, long entryNum, VARIANT * pVal, BOOL * pbSuccess);
	void DPRGetFloat(long dwDevice, long offset, float * pVal, BOOL * pbSuccess);
	void DPRGetLong(long dwDevice, long offset, long * pVal, BOOL * pbSuccess);
	void DPRVarBufInit(long dwDevice, VARIANT& vAddressArray, VARIANT& vTypeArray, long * pHandle, BOOL * pbSuccess);
	void DPRSetFloat(long dwDevice, long offset, float newVal, BOOL * pbSuccess);
	void DPRSetLong(long dwDevice, long offset, long newVal, BOOL * pbSuccess);
	void DPRVarBufWrite(long dwDevice, VARIANT& vData, VARIANT& vAddresses, VARIANT& vTypes, long * pWritten);
	void DPRFloat(__int64 d, double scale, double * pVal);
	void GetRomVersion(long dwDevice, BSTR * pVal);
	void GetRomDate(long dwDevice, BSTR * pVal);
	void GetPmacLocation(long dwDevice, long * pVal);
	void GetResponse(long dwDevice, LPCTSTR question, BSTR * pAnswer);
	void SelectDevice(long hWindow, long * pDeviceNumber, BOOL * pbSuccess);
	long get_DPRSize(long dwDevice);
	BOOL get_DPRAvailable(long dwDevice);
	void SetChecksums(long dwDevice, BOOL bActive);
	void GetControlResponse(long dwDevice, short question, BSTR * pAnswer);
	long get_LastCommError(long dwDevice);
	void GetLastCommErrorStr(long dwDevice, BSTR * pVal);
	void GetMacroIVariableLong(long dwDevice, long node, long num, long def, long * pVal);
	BOOL get_DoChecksums(long dwDevice);
	void put_DoChecksums(long dwDevice, BOOL newValue);
	void GetIVariableLong(long dwDevice, long num, long def, long * pVal);
	void GetIVariableDouble(long dwDevice, long num, double def, double * pVal);
	void SetIVariableLong(long dwDevice, long num, long newVal);
	void SetIVariableDouble(long dwDevice, long num, double newVal);
	void GetAsciiComm(long dwDevice, long * pVal);
	void SetAsciiComm(long dwDevice, long newVal);
	void GetVariableLong(long dwDevice, short ch, long num, long def, long * pVal, BOOL * pbSuccess);
	void GetVariableDouble(long dwDevice, short ch, long num, double def, double * pVal, BOOL * pbSuccess);
	void SetVariableLong(long dwDevice, short ch, long num, long newVal, BOOL * pbSuccess);
	void SetVariableDouble(long dwDevice, short ch, long num, double newVal, BOOL * pbSuccess);
	BOOL get_InBootStrapMode(long dwDevice);
	BOOL get_MotionBufferOpen(long dwDevice);
	BOOL get_RotaryBufferOpen(long dwDevice);
	BOOL get_IsTurbo(long dwDevice);
	void RestoreLinkList(LPCTSTR firmwareVersion, BOOL * pbSuccess);
	void BackupLinkList(long dwDevice, BOOL * pbSuccess);
	void SetCriticalIVars(long dwDevice, BOOL * pbSuccess);
	void GetLocAndEnum(long dwDevice, long * pLoc, long * pEnum, BOOL * pbSuccess);
	void GetProgramInfo(long dwDevice, BOOL bPlc, long num, long * pSAdr, long * pFAdr);
	void DownloadFile(long dwDevice, LPCTSTR filePath);
	void AbortDownload(long dwDevice);
	void DownloadFirmwareFile(long dwDevice, LPCTSTR filePath, BOOL * pbSuccess);
	void Download(long dwDevice, LPCTSTR filePath, BOOL bMacro, BOOL bMap, BOOL bLog, BOOL bDnld, BOOL * pbSuccess);
	BOOL get_Downloading(long dwDevice);
	long get_MaxDownloadErrors();
	void put_MaxDownloadErrors(long newValue);
	void CompilePLCC(long dwDevice, LPCTSTR inFilePath, LPCTSTR outFilePath, BOOL * pbSuccess);
	void SendCommand(long dwDevice, LPCTSTR cmd, long * pstatus);
	void GetPlcStatus(long dwDevice, long * pNumPlc, long * pNumPlcc, long * pI5);
	void GetFirstPlcc(long dwDevice, BOOL * pbLoaded, BOOL * pbEnabled, long * pStartAdr, long * pLastAdr, long * pSize, BOOL * pbMore);
	void GetNextPlcc(long dwDevice, BOOL * pbLoaded, BOOL * pbEnabled, long * pStartAdr, long * pLastAdr, long * pSize, BOOL * pbMore);
	void GetFirstPlc(long dwDevice, BOOL * pbEnabled, long * pStartAdr, long * pLastAdr, long * pSize, BOOL * pbMore);
	void GetNextPlc(long dwDevice, BOOL * pbEnabled, long * pStartAdr, long * pLastAdr, long * pSize, BOOL * pbMore);
	BOOL get_IsAnyPlcRunning(long dwDevice);
	void GetGlobalStatus(long dwDevice, long * pStatusX, long * pStatusY, BOOL * pbSuccess);
	void GetCoordStatus(long dwDevice, long dwCoord, long * pStatusX, long * pStatusY, BOOL * pbSuccess);
	void GetMotorStatus(long dwDevice, long lMotor, long * pStatusX, long * pStatusY, BOOL * pbSuccess);
	BOOL get_SysServoError(long dwDevice);
	BOOL get_SysReEntryError(long dwDevice);
	BOOL get_SysMemChecksumError(long dwDevice);
	BOOL get_SysPromChecksumError(long dwDevice);
	BOOL get_SysInposition(long dwDevice, long dwCoord);
	BOOL get_SysWarnFError(long dwDevice, long dwCoord);
	BOOL get_SysFatalFError(long dwDevice, long dwCoord);
	BOOL get_SysRuntimeError(long dwDevice, long dwCoord);
	BOOL get_SysCircleRadError(long dwDevice, long dwCoord);
	BOOL get_SysAmpFaultError(long dwDevice, long dwCoord);
	void GetCommandedPos(long dwDevice, long mtr, double scale, double * pVal);
	void GetPosition(long dwDevice, long mtr, double scale, double * pVal);
	void GetNetActualPosition(long dwDevice, long mtr, double scale, double * pVal);
	void GetFollowError(long dwDevice, long mtr, double scale, double * pVal);
	void GetVelocity(long dwDevice, long mtr, double scale, double * pVal);
	void GetMasterPos(long dwDevice, long mtr, double scale, double * pVal);
	void GetCompensationPos(long dwDevice, long mtr, double scale, double * pVal);
	void GetTargetPos(long dwDevice, long mtr, double scale, double * pVal);
	void GetBiasPos(long dwDevice, long mtr, double scale, double * pVal);
	void GetProgExecPoint(long dwDevice, long dwCoord, long * pVal);
	void GetRotBufFull(long dwDevice, long dwCoord, BOOL * pVal);
	BOOL get_ProgramRunning(long dwDevice, long dwCoord);
	BOOL get_ProgramStepping(long dwDevice, long dwCoord);
	BOOL get_ProgramContMotion(long dwDevice, long dwCoord);
	BOOL get_ProgramContRequest(long dwDevice, long dwCoord);
	long get_ProgramRemaining(long dwDevice, long dwCoord);
	BOOL get_MotionBufOpen(long dwDevice);
	BOOL get_ProgramFeedMode(long dwDevice, long dwCoord);
	BOOL get_MotorAmpEnabled(long dwDevice, long mtr);
	BOOL get_MotorWarnFError(long dwDevice, long mtr);
	BOOL get_MotorFatalFError(long dwDevice, long mtr);
	BOOL get_MotorAmpFault(long dwDevice, long mtr);
	BOOL get_MotorOnPositionLimit(long dwDevice, long mtr);
	BOOL get_MotorHomeComplete(long dwDevice, long mtr);
	BOOL get_MotorInPosition(long dwDevice, long mtr);
	long get_TimRemInMove(long dwDevice, long dwCoord);
	long get_TimeRemInTATS(long dwDevice, long dwCoord);
	BOOL get_MotorDataBlockError(long dwDevice, long mtr);
	BOOL get_MotorPhased(long dwDevice, long mtr);
	BOOL get_MotorEnabled(long dwDevice, long mtr);
	BOOL get_MotorHandwheelEnabled(long dwDevice, long mtr);
	BOOL get_MotorOpenLoop(long dwDevice, long mtr);
	BOOL get_MotorOnNegLimit(long dwDevice, long mtr);
	BOOL get_MotorOnPosLimit(long dwDevice, long mtr);
	void SetJogReturn(long dwDevice, long mtr);
	void GetWhyMotorNotMoving(long dwDevice, long motor, long * pVal);
	void GetWhyMotorNotMovingStr(long err, BSTR * pVal);
	void GetWhyCSNotMoving(long dwDevice, long cs, long * pVal);
	void GetWhyCSNotMovingStr(long err, BSTR * pVal);
	BOOL get_BufferOpen(long dwDevice);
	long get_GatherPeriod(long dwDevice);
	void put_GatherPeriod(long dwDevice, long newValue);
	BOOL get_GatherEnabled(long dwDevice, long num);
	void put_GatherEnabled(long dwDevice, long num, BOOL newValue);
	long get_GatherMode(long dwDevice);
	void put_GatherMode(long dwDevice, long newValue);
	double get_GatherSampleTime(long dwDevice);
	void put_GatherSampleTime(long dwDevice, double newValue);
	void GetNumGatherSources(long dwDevice, long * pVal);
	void GetNumGatherSamples(long dwDevice, long * pVal);
	void SetGather(long dwDevice, long num, LPCTSTR str, BOOL bEnable, BOOL * pbSuccess);
	void SetQuickGather(long dwDevice, long lComMask, long lEncMask, long lDacMask, long lCurMask, BOOL bEnable, BOOL * pbSuccess);
	void SetQuickGatherWithDirectCurrent(long dwDevice, long lComMask, long lEncMask, long lDacMask, long lCurMask, BOOL bEnable, BOOL * pbSuccess);
	void GetGather(long dwDevice, long num, BSTR * pStr, BOOL * pbSuccess);
	void ClearGather(long dwDevice);
	void InitGather(long dwDevice, long size, double msec, BOOL * pbSuccess);
	void ClearGatherData(long dwDevice);
	void CollectGatherData(long dwDevice, long * pSources, long * pSamples, BOOL * pbSuccess);
	void GetGatherSamples(long dwDevice, long sourceNum, VARIANT * pVariant, BOOL * pbSuccess);
	void GetGatherPoint(long dwDevice, long sourceNum, long sampleNum, double * pVal, BOOL * pbSuccess);
	void StartGather(long dwDevice, BOOL * pbSuccess);
	void StopGather(long dwDevice);
	void InitPlotGather(long dwDevice, long size, long period, BOOL * pbSuccess);
	void ReadGatherFile(long dwDevice, LPCTSTR bsFilePath, BOOL * pbSuccess);
	void WriteGatherFile(long dwDevice, LPCTSTR bsFilePath, BOOL * pbSuccess);
	void strtod48f(LPCTSTR str, double * pVal);
	void strtod48l(LPCTSTR str, double * pVal);
	void strtod24(LPCTSTR str, double * pVal);
	void strtod32dp(LPCTSTR str, double * pVal);
	void strto32f(LPCTSTR str, double * pVal);
	void UploadMacroConfig(long dwDevice, LPCTSTR bsFilePath, BOOL * pbSuccess);
	void DownloadCurrentFeedbackTest(long dwDevice, short mtr, double pwmDutyCycle, short pwmFreq, BOOL bMacro, BOOL bUltra, BOOL * pbSuccess);
	void ReadResultsFromCurrentFeedbackTest(long dwDevice, short mtr, long * pVal);
	void DownloadVoltageSixStepTest(long dwDevice, short mtr, double pwmDutyCycle, BOOL bMacro, BOOL bUltra, BOOL * pbSuccess);
	void ReadResultsFromSixStepTest(long dwDevice, BOOL bSipFirstStep, VARIANT * pvStepArray, long * pResult);
	void DownloadCurrentSixStepTest(long dwDevice, short motor, double pwmDutyCycle, BOOL bMacro, BOOL bUltra, BOOL * pbSuccess);
	void DownloadOpenLoopTest(long dwDevice, short motor, short magnitude, short time, short reps, BOOL bGatherCurrents, BOOL bMacro, BOOL * pbSuccess);
	void DownloadOpenLoopTest1(long dwDevice, short motor, short magnitude, short time, short reps, BOOL bGatherCurrents, BOOL bMacro, BOOL * pbSuccess);
	void DownloadVelLimitPLC(long dwDevice, short motor, long maxspd, BOOL * pbSuccess);
	void DownloadPosLimitPLC(long dwDevice, short motor, BOOL * pbSuccess);
	void DownloadUVWSixStepTest(long dwDevice, short motor, double pwmDutyCycle, BOOL * pbSuccess);
	void ReadResultsFromUVWSixStepTest(long dwDevice, VARIANT * pvArray, long * pResult);
	void SetIVarForFeedback(long dwDevice, short ivar, long address, long fbType, BOOL * pbSuccess);
	void DownloadAndRunRoughPhasePLC(long dwDevice, short motor, BOOL * pbSuccess);
	void CreateIncrementalFinePhasePLC(long dwDevice, LPCTSTR filePath, short PLCNumber, short motor, BOOL * pbSuccess);
	void DoACurrentLoopStep(long dwDevice, short motor, short dwellTime, long magnitude, BOOL bAutoTune, BSTR * pbsCTSCurrent, double pwmDutyCycle, short divisor, BOOL bUltra);
	void DoACurrentLoopStepBrush(long dwDevice, short motor, short dwellTime, long magnitude, BOOL bAutoTune, BSTR * pbsCTSCurrent, double pwmDutyCycle, short divisor, BOOL bUltra);
	void DoAPositionLoopStep(long dwDevice, short motor, short stepSize, short stepTime, BOOL bBiDirectional, BOOL * pbSuccess);
	void DoAParabolicMove(long dwDevice, short motor, long stepSize, short stepTime, BOOL bBiDirectional, BOOL * pbSuccess);
	void DoAGantryPositionLoopStep(long dwDevice, short motor, short motor2, short stepSize, short stepTime, BOOL bBiDirectional, BOOL * pbSuccess);
	void DoAGantryParabolicMove(long dwDevice, short motor, short motor2, long stepSize, short stepTime, BOOL bBiDirectional, BOOL * pbSuccess);
	void DoAGantryParabolic(long dwDevice, short motor, short motor2, BOOL * pbSuccess);
	void ConvertWordToStringFloat(LPCTSTR word, BSTR * pVal);
	void ConvertWordToShort(LPCTSTR word, short offset, short * pVal);
	void ConvertWordToLong(LPCTSTR word, long * pVal);
	void RestoreModifiedIVars(long dwDevice, short motor);
	void CalculateStepStatistics(VARIANT * pvData, long stepSize, long I10, long I19, BSTR * pbsRiseTime, BSTR * pbsPeakTime, BSTR * pbsNatFreq, BSTR * pbsOvershoot, BSTR * pbsDamping, BSTR * pbsSettleTime);
	void LowPassFilterTheData(VARIANT * pvData, LPCTSTR bsCurrent);
	void DifferentiateTheData(VARIANT * pvData, long I10, long I19, long * pMinVal, long * pMaxVal);
	void DownloadAutoTuningPLC(long dwDevice, short motor, BOOL bCurrentLoop, BOOL bBypassJog, BOOL * pbSuccess);
	void DownloadGantryAutoTuningPLCP1(long dwDevice, short motor, short motor2, BOOL bCurrentLoop, BOOL bBypassJog, BOOL * pbSuccess);
	void DownloadGantryAutoTuningPLC(long dwDevice, short motor, short motor2, BOOL bCurrentLoop, BOOL bBypassJog, double MaxTravel, long time, BOOL * pbSuccess);
	void MagEstimation(long dwDevice, LPCTSTR filePath, BOOL * pbSuccess);
	void SlopeEstimation(long dwDevice, LPCTSTR filePath, BOOL * pbSuccess);
	void SetCurrentGather(long dwDevice, long mask, BOOL bEnable, BOOL * pbSuccess);
	void DownloadOpenLoopTestForPMAC1(long dwDevice, short motor, short magnitude, short time, short reps, BOOL bGatherCurrents, BOOL bMacro, BOOL * pbSuccess);
	void GetMacroNodes(long dwDevice, long * pNumMacroStations, long * pNumActiveNodes);
	void GetMacroNodeInfo(long dwDevice, long modeNum, BOOL * pbEnabled, BOOL * pbIsIONode, long * pID);
	void SetMacroIVariableString(long dwDevice, long node, long num, LPCTSTR bsMIVarValue, BOOL * pbSuccess);
	void GetMacroIVariableString(long dwDevice, long node, long num, LPCTSTR bsDefault, BSTR * pbsVal);
	void GetCommandLogging(long dwDevice, BOOL * pbON);
	void SetCommandLogging(long dwDevice, BOOL bOn, LPCTSTR bsFilePath, BOOL * pbSuccess);
	void GetEnumeration(long dwDevice, long * pVal);
	void GetControlValues(long dwDevice, short ctrlCh, VARIANT * pVariant, BOOL * pbSuccess);
	void MultiDownload(long dwDevice, LPCTSTR outFile, LPCTSTR iniFile, LPCTSTR userID, BOOL bMacro, BOOL bMap, BOOL bLog, BOOL bDnld, BOOL * pbSuccess);
	void AddDownloadFile(long dwDevice, LPCTSTR iniFile, LPCTSTR userID, LPCTSTR dlFile, BOOL * pbSuccess);
	void RemoveDownloadFile(long dwDevice, LPCTSTR iniFile, LPCTSTR userID, LPCTSTR dlFile, BOOL * pbSuccess);
	void RenumberFiles(long dwDevice, long fileNumber, LPCTSTR iniFile);
	void GetVariableStr(long dwDevice, short ch, long num, BSTR * pVal, BOOL * pbSuccess);
	void DPRVarBufReadAll(long dwDevice, long h, VARIANT * pVal, BOOL * pbSuccess);
	void UltraLightAnalyze(long dwDevice, VARIANT * pVal, long * pActiveNodes);
	void GetPlcStatusStructure(long dwDevice, VARIANT * pVal, long * pPrograms);
	void GetBitValue(LPCTSTR hexStr, short bit, BOOL * pVal);
	void GetNumDeviceKeys(long * pVal);
	void DPRGetLongDouble(long dwDevice, long address, double * pVal, BOOL * pbSuccess);
	void DPRGetFixedDouble(long dwDevice, long address, double * pVal, BOOL * pbSuccess);
	void DPRGetShort(long dwDevice, long address, short * pVal, BOOL * pbSuccess);
	void DPRSetShort(long dwDevice, long address, short newVal, BOOL * pbSuccess);
	void DPRDWordBitSet(long dwDevice, long offset, long bit, BOOL * pVal, BOOL * pbSuccess);
	void DPRResetDWordBit(long dwDevice, long offset, long bit, BOOL * pbSuccess);
	void DPRSetDWordBit(long dwDevice, long offset, long bit, BOOL * pbSuccess);
	void GetFirmwareType(long dwDevice, long * pVal);
	void GetResponseEx(long dwDevice, LPCTSTR question, BOOL bAddLF, BSTR * pAnswer, long * pstatus);
	void DPRVarBufWriteEx(long dwDevice, VARIANT& vData, long * pWritten);
	void DPRGetDWordMask(long dwDevice, long offset, long mask, long * pVal);
	void DPRSetDWordMask(long dwDevice, long offset, long mask, long Val);
	void DPRRotBufRemove(long dwDevice, long bufnum);
	void DPRRotBufInit(long dwDevice, BOOL * pbSuccess);
	void DPRRotBufClr(long dwDevice, long bufnum);
	void DPRSetRotBuf(long dwDevice, BOOL on);
	void DPRAsciiStrToRotEx(long dwDevice, LPCTSTR inpstr, long bufnum, BOOL bSendRemaining, long * pstatus);
	void DPRAsciiStrToRot(long dwDevice, LPCTSTR inpstr, long bufnum, long * pstatus);
	void GetProgramMode(long dwDevice, long dwCoord, long * pVal);
	void GetProgramMotionMode(long dwDevice, long dwCoord, long * pVal);
	void MapDeviceNumToEnum(long location, long enumeration, long * pDeviceNumber);
	void MapLocAndEnumFromDeviceNum(long dwDevice, long * pLocation, long * pEnumeration);
	void GetFeedRateAndMode(long dwDevice, long dwCoord, double * pRate, BOOL * pMode);
	void GetMotorMotionMode(long dwDevice, long dwMotor, long * pVal);
	void CommandLog(long dwDevice, LPCTSTR bStr, BOOL * pbSuccess);
	void DPRGetMem(long dwDevice, long offset, long bytes, VARIANT * pVal, BOOL * pbSuccess);
	void DPRSetMem(long dwDevice, long offset, long bytes, VARIANT& Val, BOOL * pbSuccess);
	void GetResponseProgress(long dwDevice, LPCTSTR question, BOOL bAddLF, BSTR * pAnswer, long * pstatus);
	void Abort(long dwDevice);
	BOOL get_InterruptsEnabled(long dwDevice);
	void put_InterruptsEnabled(long dwDevice, BOOL newValue);
	long get_InterruptMask(long dwDevice);
	void put_InterruptMask(long dwDevice, long newValue);
	void PmacSave(long dwDevice, LPCTSTR question, long * pstatus);
	void PmacReset(long dwDevice, LPCTSTR question, BOOL bAsciiRingComm, long * pstatus);
	void PhaseMotor(long dwDevice, LPCTSTR question, long * pStatuss);
	void GetControlResponseEx(long dwDevice, short question, BSTR * pAnswer, long * pstatus);
	BOOL get_USMonitoringEnabled(long dwDevice);
	void put_USMonitoringEnabled(long dwDevice, BOOL newValue);
	long get_USMonitoringPeriod(long dwDevice);
	void put_USMonitoringPeriod(long dwDevice, long newValue);
	void DPRTest(long dwDevice, BOOL * pbSuccess);
	void AbortTest(long dwDevice);
	void DPRGetMotorRpt(long dwDevice, long motor, DEVFGMOTOR * pStruct, long * pServo, BOOL * pbSuccess);
	void DPRGetMotorRptTurbo(long dwDevice, long motor, DEVFGMOTORTURBO * pStruct, long * pServo, BOOL * pbSuccess);
	void DPRGetCoordRpt(long dwDevice, long coord, DEVBGCOORD * pStruct, long * pServo, BOOL * pbSuccess);
	void DPRGetCoordRptTurbo(long dwDevice, long coord, DEVBGCOORDTURBO * pStruct, long * pServo, BOOL * pbSuccess);
	BOOL get_DPRMotorRptEnabled(long dwDevice);
	void put_DPRMotorRptEnabled(long dwDevice, BOOL newValue);
	long get_DPRMotorRptMask(long dwDevice);
	void put_DPRMotorRptMask(long dwDevice, long newValue);
	long get_DPRMotorRptMSec(long dwDevice);
	void put_DPRMotorRptMSec(long dwDevice, long newValue);
	BOOL get_DPRCoordRptEnabled(long dwDevice);
	void put_DPRCoordRptEnabled(long dwDevice, BOOL newValue);
	long get_DPRCoordRptMSec(long dwDevice);
	void put_DPRCoordRptMSec(long dwDevice, long newValue);
	long get_DPRCoordRptMax(long dwDevice);
	void put_DPRCoordRptMax(long dwDevice, long newValue);
	void UltraLightAnalyzeStruct(long dwDevice, DEVULTRALIGHT_INFO * pStruct, long * pActiveNodes);
	void GetPlcStatusStruct(long dwDevice, DEVTOTAL_PLC_STATUS_STRUCT * pStruct, long * pPrograms);
	BOOL get_DPRTesting(long dwDevice);
	void RawGetResponseEx(long dwDevice, LPCTSTR question, BOOL bAddLF, BSTR * pAnswer, long * pstatus);
	void RawGetControlResponseEx(long dwDevice, short question, BSTR * pAnswer, long * pstatus);
	void ModBusCommand(long dwDevice, unsigned char command, VARIANT * counters, BOOL * pbSuccess);
	void ModbusAvailable(long dwDevice, unsigned char command, BOOL * pbSuccess);
	void DPRSetupBuffers(unsigned long dwDevice, BOOL * pbSuccess);
	void DPRBackground(long dwDevice, long on, long period, long coord, BOOL * pbSuccess);
	BOOL get_DataCollectionEnabled(long dwDevice);
	long get_DataCollectionResolution(long dwDevice);
	void GetTurboMotorStatusEx(long dwDevice, long lMotor, DEVMSTURBO * pstatus, BOOL * pbSuccess);
	void GetNTMotorStatusEx(long dwDevice, long lMotor, DEVMSNONTURBO * pstatus, BOOL * pbSuccess);
	void GetTurboGlobalStatusEx(long dwDevice, DEVGSTURBO * pstatus, BOOL * pbSuccess);
	void GetNTGlobalStatusEx(long dwDevice, DEVGSNONTURBO * pstatus, BOOL * pbSuccess);
	void GetTurboCoordinateStatusEx(long dwDevice, long dwCoord, DEVCSTURBO * pstatus, BOOL * pbSuccess);
	void GetNTCoordinateStatusEx(long dwDevice, long dwCoord, DEVCSNONTURBO * pstatus, BOOL * pbSuccess);
	void DataGather(long dwDevice, SAFEARRAY * * pvArray, BOOL * pbSuccess);
	void Upload(long dwDevice, DEVUPLOAD pUpload, BSTR * pData, long * pstatus);
	void ModbusActive(long dwDevice, BOOL * pbSuccess);

	// IPmacDevice 属性
public:

};
